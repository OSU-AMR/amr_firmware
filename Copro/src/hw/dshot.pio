.program dshot

; DShot ESC Protocol
; Accepts dshot commands from the FIFO
; DShot Rate is determined by clock of PIO
; Clock speed should be = DShot data rate * 8
; Ex. DShot300 is 300kbits/s, so the PIO clock should be 2.4MHz

; FIFO Format:
; This will send bits 0-15 of the fifo to the device
; If bit 16 is set, it will continue to send the command
; If bit 16 is not set, it will block read from the fifo for another command
; If the fifo is all zeros, it will block read for a new command (useful for stopping repeat commands without sending a new one)

public start:
SET PINDIRS, 1       ; Initialize pin to output

force_read:
PULL BLOCK           ; Block until there is data from the FIFO to send
JMP write_data

.wrap_target
PULL NOBLOCK         ; If there is updated data available, pull, if not, read from X
write_data:
MOV X, OSR           ; Update X with OSR in the event new data was pulled
SET Y, 15            ; Set number of bits to send counter

; Loop for transmitting the 16 bits. The number of cycles per instruction determine the data, so they must be calculated properly
; Timing should be 8 cycles total
; 3 cycles high (37.5% duty cycle high)
; 3 cycles high/low on bit value (meaning high will have 75% duty cycle)
; 2 cycles low
; Note the [delay] value does not include the time for the instruction itself
tx_loop:
SET PINS 1 [2]       ; Set pin to high (3 cycles)
OUT PINS 1 [2]       ; Set pin to bit state (3 cycles)
SET PINS 0           ; Set pin to low state (1 cycle)
JMP Y-- tx_loop      ; Jump if y not 0, and decrement (1 cycle)

; Required frame delay
SET Y, 5
frame_reset:
NOP [31]
JMP Y-- frame_reset

; OSR should only have bit 16 left in it (bits 0-15 consumed)
MOV Y, OSR
JMP !Y, force_read   ; If bit 16 is not set (y is zero) block until a new fifo command is received

.wrap

% c-sdk {

#define DSHOT_RATE(rate) ((float)(rate * 8.0 * 1000.0))

static inline void dshot_program_init(PIO pio, uint sm, uint offset, float div, uint pin) {
    pio_sm_set_pins_with_mask(pio, sm, 0, 1u << pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_gpio_init(pio, pin);

    pio_sm_config c = dshot_program_get_default_config(offset);
    sm_config_set_out_shift(&c, false, false, 17);
    sm_config_set_clkdiv(&c, div);
    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_out_pins(&c, pin, 1);
    pio_sm_init(pio, sm, offset + dshot_offset_start, &c);

    pio_sm_set_enabled(pio, sm, true);
}

%}