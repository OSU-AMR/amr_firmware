%use this matlab script to generate coefficents for the thruster control

%fill in points array with points in form of [[rpm, dshot]]
dshotArray = [-1, -1; -.5, -.5; 0, 0; 1, 1; 2, 2; 3, 3; 4, 4; 5, 5; 6, 6; 9, 9; 10, 10];

arraySize = size(dshotArray);
A = zeros((arraySize(1) - 1) * 4, (arraySize(1) - 1) * 4);
B = zeros((arraySize(1) - 1) * 4, 1);

for i=0:(length(dshotArray) - 2)
    %x val
    xVal1 = dshotArray(i + 1,1);
    xVal2 = dshotArray(i + 2,1);
   
    %apply 1st point continuity eq
   A(i * 4 + 1, i * 4 + 1) = xVal1^3;
   A(i * 4 + 1, i * 4 + 2) = xVal1^2;
   A(i * 4 + 1, i * 4 + 3) = xVal1^1;
   A(i * 4 + 1, i * 4 + 4) = 1;

   B(i * 4 + 1) = dshotArray(i + 1, 2);
1
   %apply 2st point continuity eq
   A(i * 4 + 2, i * 4 + 1) = xVal2^3;
   A(i * 4 + 2, i * 4 + 2) = xVal2^2;
   A(i * 4 + 2, i * 4 + 3) = xVal2^1;
   A(i * 4 + 2, i * 4 + 4) = 1;

   B(i * 4 + 2) = dshotArray(i + 2, 2);

   %if not the first link
   if(i > 0)

       xVal0 = dshotArray(i, 1);

        %apply 1st derivative continuity eq

        %current derivative
        A(i * 4 + 3, i * 4 + 1) = 3 * xVal1^2;
        A(i * 4 + 3, i * 4 + 2) = 2 * xVal1;
        A(i * 4 + 3, i * 4 + 3) = 1;

        A(i * 4 + 3, (i - 1) * 4 + 1) = -3 * xVal1^2;
        A(i * 4 + 3, (i - 1) * 4 + 2) = -2 * xVal1;
        A(i * 4 + 3, (i - 1) * 4 + 3) = -1;

        % apply second derivate continuty eq
        A(i * 4 + 4, i * 4 + 1) = 6 * xVal1;
        A(i * 4 + 4, i * 4 + 2) = 2;

        A(i * 4 + 4, (i - 1) * 4 + 1) = -6 * xVal1;
        A(i * 4 + 4, (i - 1) * 4 + 2) = -2;
   end
   
end   

%apply final two constraints
% 1st derivative = 0 at xmin

A(3, 1) = 3 * dshotArray(1,1)^2;
A(3, 2) = 2 * dshotArray(1,1);
A(3, 3) = 1;

%1str derivative = 0 at xmax
A(4, (length(dshotArray) - 2) * 4 + 1) = 3 * dshotArray(1,1)^2;
A(4, (length(dshotArray) - 2) * 4 + 2) = 2 * dshotArray(1,1);
A(4, (length(dshotArray) - 2) * 4 + 3) = 1;

coefficents = transpose(reshape(inv(A) * B, 4, length(dshotArray) - 1));

%make plot
points = 10000;
xVals = linspace(dshotArray(1,1), dshotArray(end,1), points);
yVals = zeros(1,points);
for i=1:points
    xValue = xVals(i);

    for j = 1:length(dshotArray) - 1
        if(xValue >= dshotArray(j,1) && xValue <= dshotArray(j + 1,1))
            %evaluate on this j coefficents
            yVals(i) = coefficents(j, 1) * xValue^3 + coefficents(j, 2) * xValue^2 + coefficents(j, 3) * xValue + coefficents(j, 4);
        end
    end
end

plot(xVals, yVals)