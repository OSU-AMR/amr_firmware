#ifndef CAN_BRIDGE_H
#define CAN_BRIDGE_H

#include "pico/time.h"
#include <stdint.h>
#include <stddef.h>

#include "hardware/spi.h"

#include "basic_queue/queue.h"

#include "canmore/msg_encoding.h"

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @file can_bridge.h
 *
 * Contains required interface definitions for core-to-core communication
*/

// ========================================
// Configuration
// ========================================

// PICO_CONFIG: CAN_MESSAGE_RX_QUEUE_SIZE, Queue size for CANmore messages read from the MCP251X and decoded, waiting to be processed by the application code, type=int, default=2, group=can_mcp251Xfd
#ifndef CAN_MESSAGE_RX_QUEUE_SIZE
#define CAN_MESSAGE_RX_QUEUE_SIZE 2
#endif

// PICO_CONFIG: CAN_MESSAGE_TX_QUEUE_SIZE, Queue size for CANmore messages generated by the application code, waiting to be sent to the MCP251X, type=int, default=2, group=can_mcp251Xfd
#ifndef CAN_MESSAGE_TX_QUEUE_SIZE
#define CAN_MESSAGE_TX_QUEUE_SIZE 2
#endif

// PICO_CONFIG: CAN_UTILITY_RX_QUEUE_SIZE, Queue size for CANmore utility frames received and decoded by the second (dedicated CAN) core waiting to be processed by the primary core, type=int, default=8, group=can_mcp251Xfd
#ifndef CAN_UTILITY_RX_QUEUE_SIZE
#define CAN_UTILITY_RX_QUEUE_SIZE 8
#endif

// PICO_CONFIG: CAN_UTILITY_TX_QUEUE_SIZE, Queue size for CANmore utility frames generated by the primary core waiting to be transmitted by the second (dedicated CAN) core, type=int, default=4, group=can_mcp251Xfd
#ifndef CAN_UTILITY_TX_QUEUE_SIZE
#define CAN_UTILITY_TX_QUEUE_SIZE 4
#endif

// ========================================
// CAN Message/Frame Queues
// ========================================

/**
 * @brief Storage for queuing CANmore message data
*/
struct canmore_msg {
    // Message data buffer
    uint8_t data[CANMORE_MAX_MSG_LENGTH];
    // Length of data in buffer
    size_t length;
};

/**
 * @brief Storage for queuing CANmore utility frame data
*/
struct canmore_utility_frame {
    // Channel to use for utility frame
    uint8_t channel;
    // Frame DLC
    uint32_t dlc;
    // Data buffer
    union {
        uint8_t data[8];
        uint32_t data32[2];
    };
};

/**
 * @brief Queues for inter-core communication for message and utility frame TX/RX
*/
extern struct msg_receive_queue QUEUE_DEFINE(struct canmore_msg, CAN_MESSAGE_RX_QUEUE_SIZE) msg_receive_queue;
extern struct msg_transmit_queue QUEUE_DEFINE(struct canmore_msg, CAN_MESSAGE_TX_QUEUE_SIZE) msg_transmit_queue;
extern struct utility_receive_queue QUEUE_DEFINE(struct canmore_utility_frame, CAN_UTILITY_RX_QUEUE_SIZE) utility_receive_queue;
extern struct utility_transmit_queue QUEUE_DEFINE(struct canmore_utility_frame, CAN_UTILITY_TX_QUEUE_SIZE) utility_transmit_queue;

#ifdef __cplusplus
}
#endif

#endif